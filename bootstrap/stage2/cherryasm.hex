# Convert big endian formatted .chex files into binary files, ignoring comments
# starting with '#' (0x23) and run until '\n' (0xA).

# Also parses labels, of the form 'xAB' which mark their position in the file
# and commands of the form jAB which jump to those points in the file using a
# bl instruction.

ea 00 00 1e # b over functions

# x00 # ASCIItoInt function
e3 50 00 39 # cmp r0, 0x39 ('9')
ca 00 00 01 # bgt forward to letter conversion code
e2 40 00 30 # sub r0, r0, 0x30 # convert digit
e1 2f ff 1e # bx lr
e3 80 00 20 # orr r0, r0, 0x20 # setting bit 5 converts uppercase to lowercase
# now assume lowercase letter
e2 40 00 57 # sub r0, r0, 0x57
e1 2f ff 1e # bx lr

# x01 # ReadLabel function
e5 98 00 00 # ldr r0, [r8]
e3 10 00 01 # tst r0, 0x01
0a ff ff fc # beq -4 bytes (2 back to ldr + 2 from prefetch)
e5 99 00 00 # ldr r0, [r9]
eb ff ff f3 # j00 # bl ASCIItoInt
e3 a0 1d 02 # lsl r1, r0, 0x4
# read second char
e5 98 00 00 # ldr r0, [r8]
e3 10 00 01 # tst r0, 0x01
0a ff ff fc # beq -4 bytes (2 back to ldr + 2 from prefetch)
e5 99 00 00 # ldr r0, [r9]
eb ff ff ed # j00 # bl ASCIItoInt
e1 80 10 01 # orr r1, r0, r1
# r1 now contains the label name, multiply by 4 to get address for store/load
e1 a0 11 01 # lsl r1, r1, 0x2 # shift left by 2 == mul by 4
e1 2f ff 1e # bx lr

# x02 # UARTRead Function
e5 98 00 00 # ldr r0, [r8]
e3 10 00 01 # tst r0, 0x01
0a ff ff fc # beq -4 bytes (2 back to ldr + 2 from prefetch)
e5 99 00 00 # ldr r0, [r9]
e1 2f ff 1e # bx lr

# x03 # UARTWrite Function
e5 98 10 00 # ldr r1, [r8]
e3 11 00 20 # tst r1, 0x20
0a ff ff fc # beq -2 bytes (2 back to ldr + 2 from prefetch)
e5 89 00 00 # str r0, [r9]
e1 2f ff 1e # bx lr

# Set up UART
e3 a0 14 3f # mov r1,     0x3f000000
e2 81 18 21 # add r1, r1, 0x00210000
e2 81 1a 05 # add r1, r1, 0x00005000
e2 81 10 04 # add r1, r1, 0x00000004
e3 a0 00 01 # mov r0, 1
e5 81 00 00 # str r0, [r1]
e2 81 10 40 # add r1, 0x40
e3 a0 00 00 # mov r0, 0
e5 81 00 00 # str r0, [r1]
e2 81 10 1c # add r1, 0x1c
e5 81 00 00 # str r0, [r1]
e2 41 10 14 # sub r1, 0x14
e3 a0 00 03 # mov r0, 3
e5 81 00 00 # str r0, [r1]
e2 81 10 04 # add r1, 0x4
e3 a0 00 00 # mov r0, 0
e5 81 00 00 # str r0, [r1]
e2 41 10 0c # sub r1, C
e5 81 00 00 # str r0, [r1]
e2 81 10 04 # add r1, 4
e3 a0 00 c6 # mov r0, c6
e5 81 00 00 # str r0, [r1]
e2 81 10 20 # add r1, 0x20
e3 a0 00 0e # mov r0, e
e2 80 0C 01 # add r0, r0, 1 rrot 24
e5 81 00 00 # str r0, [r1]
e3 a0 14 3f # mov r1,     0x3f000000
e2 81 16 02 # add r1, r1, 0x00200000
e2 81 10 04 # add r1, r1, 0x00000004
e5 91 00 00 # ldr r0, [r1]
e3 c0 0a 07 # bic r0, 7 rrot 14
e3 80 0a 02 # orr r0, 2 rrot 14
e3 c0 09 0e # bic r0, e rrot 12
e3 80 09 04 # orr r0, 4 rrot 12
e5 81 00 00 # str r0, [r1]
e2 81 10 90 # add r1, r1, 0x90
e3 a0 00 00 # mov r0, 0
e5 81 00 00 # str r0, [r1]
e3 a0 20 96 # mov r2, 0x96
e2 52 20 01 # sub r2, r2, 1
4a ff ff fd # bmi -1 byte (branch -3, must include 8 byte prefetch)
e2 81 10 04 # add r1, r1, 0x4
e3 a0 09 03 # mov r0, 3 << 14
e5 81 00 00 # str r0, [r1]
e3 a0 20 96 # mov r2, 0x96
e2 52 20 01 # sub r2, r2, 1
4a ff ff fd # bmi -1 byte (branch -3, must include 8 byte prefetch)
e3 a0 00 00 # mov r0, 0
e5 81 00 00 # str r0, [r1]
e3 a0 00 03 # mov r0, 3
e3 a0 14 3f # mov r1,     0x3f000000
e2 81 18 21 # add r1, r1, 0x00210000
e2 81 1a 05 # add r1, r1, 0x00005000
e2 81 10 60 # add r1, r1, 0x00000060
e5 81 00 00 # str r0, [r1]

# UART setup complete

# Register usage description:
# r0  = Temp values + argument/retval passed to/returned from functions
# r1  = Temp values
# r2  = Temp word, held until written to memory
# r4  = Flags, see below
# r5  = For calculating shift offset when building a byte
# r6  = memory save address (starts == r7)
# r7  = initial memory save address
# r8  = AUX_MU_LSR_REG address
# r9  = AUX_MU_IO_REG  address
# r10 = Amount of bytes loaded so far.
# r11 = Label table beginning. Labels are stored at r11 + their name's value * 4
#       i.e. Label 01 is at r11 + 4
# r12 = Temp values

# r4 flags register:
# Bit 0 = In "Comment mode"?
# Bit 1 = Parsing a label?
# Bit 2 = Parsing a jump instruction?

e3 a0 00 00 # mov r0, 0x00
e3 a0 10 00 # mov r1, 0x00
e3 a0 20 00 # mov r2, 0x00
e3 a0 40 00 # mov r4, 0x00
e3 a0 50 1c # mov r5, 0x1c = 28
e3 a0 7a 02 # mov r7, 0x0002000
e1 a0 60 07 # mov r6, r7
e3 a0 a0 00 # mov r10, 0x00
e3 a0 ba 03 # mov r11, 0x0003000

# load r9 with            AUX_MU_IO_REG  (0x3F215040)
# load r8 with r9 + 0x14 (AUX_MU_LSR_REG (0x3F215054))
e3 a0 94 3f # mov r9,     0x3f000000
e2 89 98 21 # add r9, r9, 0x00210000
e2 89 9a 05 # add r9, r9, 0x00005000
e2 89 90 40 # add r9, r9, 0x00000040
e2 89 80 14 # add r8, r9, 0x14

# wait for 0x2 to start
eb ff ff af # j02 # bl UARTRead
e3 50 00 02 # cmp r0, 0x2
1a ff ff fc # beq -2

eb ff ff ac # j02 # bl UARTRead

# check for 0x3 which we take to mean "goto address in r7 and start executing"
e3 50 00 03 # cmp r0, 0x03
0a 00 00 32 # branch forward to end of this file for branch setup

e3 50 00 23 # cmp r0, '#' 0x23
03 84 40 01 # orreq r4, r4, 0x1

e3 14 00 01 # tst r4, 0x01
0a 00 00 02 # beq over "comment mode"
# COMMENT MODE - check for end of line, else go back for more input
e3 50 00 0a # cmp r0, '\n' (0xa)
03 c4 40 01 # biceq r4, 0x1 # if '\n' end comment mode
ea ff ff f5 # b back to get more input

e3 50 00 58 # cmp r0, 'X' 0x58
03 84 40 02 # orreq r4, r4, 0x2
e3 50 00 78 # cmp r0, 'x' 0x78
03 84 40 02 # orreq r4, r4, 0x2

e3 14 00 02 # tst r4, 0x02
0a 00 00 03 # beq over "label mode"
# LABEL MODE - Read two hex chars and add them to the label table
eb ff ff 8e # j01 # bl ReadLabel
e7 8b a0 01 # str r10, [r11 + r1]
e3 c4 40 02 # bic r4, 0x2
ea ff ff eb # b back to read procedure

e3 50 00 4A # cmp r0, 'J' 0x4A
03 84 40 04 # orreq r4, r4, 0x4
e3 50 00 6A # cmp r0, 'j' 0x6A
03 84 40 04 # orreq r4, r4, 0x4

e3 14 00 04 # tst r4, 0x04
0a 00 00 0d # beq over "jump mode"
# JUMP MODE: Read 2 hex chars, then output an unconditional branch w/ link 
# to the address referenced by that label
eb ff ff 84 # j01 # bl ReadLabel
# after ReadLabel, r1 contains the offset from the beginning of r11
e7 9b 00 01 # ldr r0, [r11 + r1]
# r0 now contains the address of the label
# load r1 with a bl to the address; first byte is eb, followed by 3 bytes offset
e3 a0 14 eb # mov r1, 0xeb rrot 8
e3 e0 c0 01 # mvn r12, 0x1 # set r12 to -2 to account for instr prefetch
e0 46 d0 00 # sub r13, r6, r0
e0 4c c0 0d # sub r12, r12, r13
# r12 now contains offset in bytes, divide by 4 by shifting right 2
e1 a0 c1 2c # lsr r12, 2
e3 cc c4 ff # bic r12, r12, 0xff000000
e1 81 10 0c # orr r1, r1, r12
# r1 contains full bl instruction, write to memory
e5 86 10 00 # str r1, [r6]
e2 86 60 04 # add r6, r6, 0x4
e2 8a a0 04 # add r10, r10, 0x4
e3 c4 40 04 # bic r4, 0x2
ea ff ff d7 # b, return to loading next symbol

# Now wait for input, build up words and send back the last byte of each word
# while writing that word to memory

# Ignore below 0x30 ('0')
e3 50 00 30 # cmp r0, '0' (0x30)
ba ff ff d5 # blt "read from input"

# call ASCIItoInt
eb ff ff 74 # j00 # bl ASCIItoInt

# now write into register r2 , shifting by r5
e1 a0 05 10 # lsl r0, r0, r5
e1 82 20 00 # orr r2, r2, r0

e3 55 00 00 # cmp r5, 0x00
1a 00 00 06 # bne forwards to sub from r5
e3 a0 50 1c # mov r5, 0x1c = 28 
e5 86 20 00 # str r2, [r6]
e1 a0 00 02 # mov r0, r2
# send the character back over uart for immediate feedback
eb ff ff 7f # j02 # Call UARTWrite
e3 a0 20 00 # mov r2, 0x00
e2 86 60 04 # add r6, r6, 0x4
ea 00 00 00 # skip 1 instr
e2 45 50 04 # sub r5, r5, 0x4

ea ff ff c7 # branch to beginning of read routine

e1 2f ff 17 # bx r7
ea ff ff fe # b 0x00, loop forever
